!=======================================================================
! Generated by  : PSCAD v4.5.0.0
!
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Main
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE MainDyn()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

!     SUBR    3PHVSRC       ! 3-Phase Source model

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  NT_11(3)

! Control Signals
      INTEGER  BRK, IT_1, IT_2, IT_3, IT_4, IT_5
      INTEGER  IT_6, IT_7, IT_8, IT_9, IT_10
      REAL     RT_1, RT_2, Vb1(3), Vf1(7)
      REAL     Vph1(7), Vph2(7), Vf2(7), Vb2(3)
      REAL     Vb3(3), Vf3(7), Vph3(7), Vf14(7)
      REAL     Vph4(7), Vf5(7), Vph5(7), Vf5_rms
      REAL     Vf4_rms, P2_5, Q2_5, P1_3, Q1_3
      REAL     R1, Vf3_rms, Vf2_rms, Vf1_rms
      REAL     P1_2, Q1_2, P2_3, Q2_3, P3_4, Q3_4
      REAL     P2_4, Q2_4, L1, Vph5_rms, Vph4_rms
      REAL     Vph3_rms, Vph2_rms, Vph1_rms, Q5
      REAL     P5, Q4, P4, R, L, V5, V4, Q3, P3
      REAL     Q2, P2, P2_load, Q2_load, Vb5(3)
      REAL     Vb4(3), RT_3(7), RT_4(7), RT_5
      REAL     RT_6, RT_7, RT_8(7), RT_9(7)
      REAL     RT_10(7), RT_11(7), RT_12, RT_13
      REAL     RT_14, RT_15(7), RT_16(7)
      REAL     RT_17(7), RT_18(7), RT_19, RT_20
      REAL     RT_21, RT_22(7), RT_23(7)
      REAL     RT_24(7), RT_25(7), RT_26, RT_27
      REAL     RT_28, RT_29(7), RT_30(7)
      REAL     RT_31(7), RT_32(7), RT_33, RT_34
      REAL     RT_35, RT_36(7), RT_37(7), RT_38
      REAL     RT_39, RT_40, RT_41, RT_42, RT_43
      REAL     RT_44, RT_45, RT_46, RT_47, RT_48
      REAL     RT_49, RT_50, RT_51, RT_52, RT_53
      REAL     RT_54, P1, Q1, V1, Ph1, V2, Ph2
      REAL     P4_5, Q4_5, Ph5, Ph4, V3, Ph3

! Internal Variables
      LOGICAL  LVD1_1
      INTEGER  IVD1_1, IVD1_2, IVD1_3, IVD1_4
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6, RVD1_7

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER ISUBS, SS(6), IBRCH(6), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 11
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 309
      NPGB      = NPGB + 34
      INODE     = NNODE + 2
      NNODE     = NNODE + 62

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 6

      DO IT_0 = 1,6
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 12

      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 15

      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 15

      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 21

      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 9

      IBRCH(6)     = NBRCH(SS(6))
      NBRCH(SS(6)) = NBRCH(SS(6)) + 6
!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      RT_1     = STOF(ISTOF + 1)
      RT_2     = STOF(ISTOF + 2)
      Vf5_rms  = STOF(ISTOF + 82)
      Vf4_rms  = STOF(ISTOF + 83)
      BRK      = STOI(ISTOI + 1)
      P2_5     = STOF(ISTOF + 84)
      Q2_5     = STOF(ISTOF + 85)
      P1_3     = STOF(ISTOF + 86)
      Q1_3     = STOF(ISTOF + 87)
      R1       = STOF(ISTOF + 88)
      Vf3_rms  = STOF(ISTOF + 89)
      Vf2_rms  = STOF(ISTOF + 90)
      Vf1_rms  = STOF(ISTOF + 91)
      P1_2     = STOF(ISTOF + 92)
      Q1_2     = STOF(ISTOF + 93)
      P2_3     = STOF(ISTOF + 94)
      Q2_3     = STOF(ISTOF + 95)
      P3_4     = STOF(ISTOF + 96)
      Q3_4     = STOF(ISTOF + 97)
      P2_4     = STOF(ISTOF + 98)
      Q2_4     = STOF(ISTOF + 99)
      L1       = STOF(ISTOF + 100)
      Vph5_rms = STOF(ISTOF + 101)
      Vph4_rms = STOF(ISTOF + 102)
      Vph3_rms = STOF(ISTOF + 103)
      Vph2_rms = STOF(ISTOF + 104)
      Vph1_rms = STOF(ISTOF + 105)
      Q5       = STOF(ISTOF + 106)
      P5       = STOF(ISTOF + 107)
      Q4       = STOF(ISTOF + 108)
      P4       = STOF(ISTOF + 109)
      R        = STOF(ISTOF + 110)
      L        = STOF(ISTOF + 111)
      V5       = STOF(ISTOF + 112)
      V4       = STOF(ISTOF + 113)
      Q3       = STOF(ISTOF + 114)
      P3       = STOF(ISTOF + 115)
      Q2       = STOF(ISTOF + 116)
      P2       = STOF(ISTOF + 117)
      P2_load  = STOF(ISTOF + 118)
      Q2_load  = STOF(ISTOF + 119)
      RT_5     = STOF(ISTOF + 140)
      RT_6     = STOF(ISTOF + 141)
      RT_7     = STOF(ISTOF + 142)
      RT_12    = STOF(ISTOF + 171)
      RT_13    = STOF(ISTOF + 172)
      RT_14    = STOF(ISTOF + 173)
      RT_19    = STOF(ISTOF + 202)
      RT_20    = STOF(ISTOF + 203)
      RT_21    = STOF(ISTOF + 204)
      RT_26    = STOF(ISTOF + 233)
      RT_27    = STOF(ISTOF + 234)
      RT_28    = STOF(ISTOF + 235)
      RT_33    = STOF(ISTOF + 264)
      RT_34    = STOF(ISTOF + 265)
      RT_35    = STOF(ISTOF + 266)
      RT_38    = STOF(ISTOF + 281)
      RT_39    = STOF(ISTOF + 282)
      IT_1     = STOI(ISTOI + 2)
      RT_40    = STOF(ISTOF + 283)
      IT_2     = STOI(ISTOI + 3)
      IT_3     = STOI(ISTOI + 4)
      RT_41    = STOF(ISTOF + 284)
      RT_42    = STOF(ISTOF + 285)
      IT_4     = STOI(ISTOI + 5)
      RT_43    = STOF(ISTOF + 286)
      IT_5     = STOI(ISTOI + 6)
      RT_44    = STOF(ISTOF + 287)
      IT_6     = STOI(ISTOI + 7)
      IT_7     = STOI(ISTOI + 8)
      RT_45    = STOF(ISTOF + 288)
      RT_46    = STOF(ISTOF + 289)
      RT_47    = STOF(ISTOF + 290)
      RT_48    = STOF(ISTOF + 291)
      RT_49    = STOF(ISTOF + 292)
      IT_8     = STOI(ISTOI + 9)
      RT_50    = STOF(ISTOF + 293)
      IT_9     = STOI(ISTOI + 10)
      RT_51    = STOF(ISTOF + 294)
      RT_52    = STOF(ISTOF + 295)
      IT_10    = STOI(ISTOI + 11)
      RT_53    = STOF(ISTOF + 296)
      RT_54    = STOF(ISTOF + 297)
      P1       = STOF(ISTOF + 298)
      Q1       = STOF(ISTOF + 299)
      V1       = STOF(ISTOF + 300)
      Ph1      = STOF(ISTOF + 301)
      V2       = STOF(ISTOF + 302)
      Ph2      = STOF(ISTOF + 303)
      P4_5     = STOF(ISTOF + 304)
      Q4_5     = STOF(ISTOF + 305)
      Ph5      = STOF(ISTOF + 306)
      Ph4      = STOF(ISTOF + 307)
      V3       = STOF(ISTOF + 308)
      Ph3      = STOF(ISTOF + 309)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         Vb1(IT_0) = STOF(ISTOF + 2 + IT_0)
         Vb2(IT_0) = STOF(ISTOF + 33 + IT_0)
         Vb3(IT_0) = STOF(ISTOF + 36 + IT_0)
         Vb5(IT_0) = STOF(ISTOF + 119 + IT_0)
         Vb4(IT_0) = STOF(ISTOF + 122 + IT_0)
      END DO

! Array (1:7) quantities...
      DO IT_0 = 1,7
         Vf1(IT_0) = STOF(ISTOF + 5 + IT_0)
         Vph1(IT_0) = STOF(ISTOF + 12 + IT_0)
         Vph2(IT_0) = STOF(ISTOF + 19 + IT_0)
         Vf2(IT_0) = STOF(ISTOF + 26 + IT_0)
         Vf3(IT_0) = STOF(ISTOF + 39 + IT_0)
         Vph3(IT_0) = STOF(ISTOF + 46 + IT_0)
         Vf14(IT_0) = STOF(ISTOF + 53 + IT_0)
         Vph4(IT_0) = STOF(ISTOF + 60 + IT_0)
         Vf5(IT_0) = STOF(ISTOF + 67 + IT_0)
         Vph5(IT_0) = STOF(ISTOF + 74 + IT_0)
         RT_3(IT_0) = STOF(ISTOF + 125 + IT_0)
         RT_4(IT_0) = STOF(ISTOF + 132 + IT_0)
         RT_8(IT_0) = STOF(ISTOF + 142 + IT_0)
         RT_9(IT_0) = STOF(ISTOF + 149 + IT_0)
         RT_10(IT_0) = STOF(ISTOF + 156 + IT_0)
         RT_11(IT_0) = STOF(ISTOF + 163 + IT_0)
         RT_15(IT_0) = STOF(ISTOF + 173 + IT_0)
         RT_16(IT_0) = STOF(ISTOF + 180 + IT_0)
         RT_17(IT_0) = STOF(ISTOF + 187 + IT_0)
         RT_18(IT_0) = STOF(ISTOF + 194 + IT_0)
         RT_22(IT_0) = STOF(ISTOF + 204 + IT_0)
         RT_23(IT_0) = STOF(ISTOF + 211 + IT_0)
         RT_24(IT_0) = STOF(ISTOF + 218 + IT_0)
         RT_25(IT_0) = STOF(ISTOF + 225 + IT_0)
         RT_29(IT_0) = STOF(ISTOF + 235 + IT_0)
         RT_30(IT_0) = STOF(ISTOF + 242 + IT_0)
         RT_31(IT_0) = STOF(ISTOF + 249 + IT_0)
         RT_32(IT_0) = STOF(ISTOF + 256 + IT_0)
         RT_36(IT_0) = STOF(ISTOF + 266 + IT_0)
         RT_37(IT_0) = STOF(ISTOF + 273 + IT_0)
      END DO

!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_11(IT_0) = NODE(INODE + 30 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 30:[consti] Integer Constant 
      IT_2 = 230

! 50:[square] Square 
      RT_40 = REAL(IT_2) * REAL(IT_2)

! 90:[consti] Integer Constant 
      IT_5 = 230

! 110:[square] Square 
      RT_43 = REAL(IT_5) * REAL(IT_5)

! 130:[time-sig] Output of Simulation Time 
      RT_38 = TIME

! 140:[const] Real Constant 
      RT_45 = 293.8

! 160:[const] Real Constant 
      RT_48 = 4.922

! 170:[time-sig] Output of Simulation Time 
      RT_41 = TIME

! 190:[consti] Integer Constant 
      IT_7 = 377

! 220:[consti] Integer Constant 
      IT_3 = 100

! 230:[consti] Integer Constant 
      IT_1 = 60

! 240:[consti] Integer Constant 
      IT_8 = 10

! 250:[consti] Integer Constant 
      IT_6 = 100

! 260:[consti] Integer Constant 
      IT_9 = 10

! 270:[consti] Integer Constant 
      IT_4 = 10

! 280:[time-sig] Output of Simulation Time 
      RT_47 = TIME

! 290:[time-sig] Output of Simulation Time 
      RT_50 = TIME

! 340:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_10 = 0
      IF ( TIME .GE. 10.0 ) IT_10 = 1
      IF ( TIME .GE. (10.0+10.0) ) IT_10 = 0

! 370:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRK = 0
      ELSE
         BRK = 0
         IF ( TIME .GE. 10.0 ) BRK = (1-0)
      ENDIF

! 700:[mult] Multiplier 
      RT_39 = RT_38 * REAL(IT_3)

! 710:[mult] Multiplier 
      RT_42 = RT_41 * REAL(IT_6)

! 720:[sumjct] Summing/Differencing Junctions 
      RT_2 = + RT_42 + REAL(IT_4)

! 830:[div] Divider 
!
      IF (ABS(RT_2) .LT. 1.0E-10) THEN
         IF (RT_2 .LT. 0.0)  THEN
            RT_44 = -1.0E10 * RT_43
         ELSE
            RT_44 =  1.0E10 * RT_43
         ENDIF
      ELSE
         RT_44 = RT_43 / RT_2
      ENDIF
!

! 950:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(6), (IBRCH(6)+1), (IBRCH(6)+2), (IBRCH(6)+3),&
     & (IBRCH(6)+4), (IBRCH(6)+5), (IBRCH(6)+6),0,IT_10,7,0.01)
      LVD1_1 = (OPENBR( (IBRCH(6)+1),SS(6)).AND.OPENBR( (IBRCH(6)+2),SS(&
     &6)).AND.OPENBR( (IBRCH(6)+3),SS(6)).AND.OPENBR( (IBRCH(6)+4),SS(6)&
     &).AND.OPENBR( (IBRCH(6)+5),SS(6)).AND.OPENBR( (IBRCH(6)+6),SS(6)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI(1747839004,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 960:[breaker3] 3 Phase Breaker 'BRK'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(4), (IBRCH(4)+19),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK)))
      CALL EMTDC_BREAKER1(SS(4), (IBRCH(4)+20),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK)))
      CALL EMTDC_BREAKER1(SS(4), (IBRCH(4)+21),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(4)+19),SS(4)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(4)+20),SS(4)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(4)+21),SS(4)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI(1137688432,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI(1137688432,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI(1137688432,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(4)+19),SS(4)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(4)+20),SS(4)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(4)+21),SS(4)))

! 970:[div] Divider 
!
      IF (ABS(REAL(IT_9)) .LT. 1.0E-10) THEN
         IF (REAL(IT_9) .LT. 0.0)  THEN
            RT_49 = -1.0E10 * RT_50
         ELSE
            RT_49 =  1.0E10 * RT_50
         ENDIF
      ELSE
         RT_49 = RT_50 / REAL(IT_9)
      ENDIF
!

! 980:[div] Divider 
!
      IF (ABS(REAL(IT_8)) .LT. 1.0E-10) THEN
         IF (REAL(IT_8) .LT. 0.0)  THEN
            RT_46 = -1.0E10 * RT_47
         ELSE
            RT_46 =  1.0E10 * RT_47
         ENDIF
      ELSE
         RT_46 = RT_47 / REAL(IT_8)
      ENDIF
!

! 990:[mult] Multiplier 
      L = RT_48 * RT_49

! 1000:[mult] Multiplier 
      R = RT_45 * RT_46

! 1010:[sumjct] Summing/Differencing Junctions 
      RT_1 = + RT_39 + REAL(IT_1)

! 1020:[div] Divider 
!
      IF (ABS(REAL(IT_7)) .LT. 1.0E-10) THEN
         IF (REAL(IT_7) .LT. 0.0)  THEN
            L1 = -1.0E10 * RT_44
         ELSE
            L1 =  1.0E10 * RT_44
         ENDIF
      ELSE
         L1 = RT_44 / REAL(IT_7)
      ENDIF
!

! 1030:[div] Divider 
!
      IF (ABS(RT_1) .LT. 1.0E-10) THEN
         IF (RT_1 .LT. 0.0)  THEN
            R1 = -1.0E10 * RT_40
         ELSE
            R1 =  1.0E10 * RT_40
         ENDIF
      ELSE
         R1 = RT_40 / RT_1
      ENDIF
!

! 1:[source_3] Three Phase Voltage Source Model 2 'Source 1'
! Three Phase Source: Source 1  Type: Ideal
! With specified terminal conditions
      RVD1_1 = RTCF(NRTCF)
      RVD1_2 = RTCF(NRTCF+1)
      RVD1_3 = RTCF(NRTCF+2)
      RVD1_4 = RTCF(NRTCF+3)
      NRTCF  = NRTCF + 4
      CALL EMTDC_3PHVSRC(SS(1), (IBRCH(1)+1), (IBRCH(1)+2), (IBRCH(1)+3)&
     &, RVD1_4, .TRUE., RVD1_1 , RVD1_2, RVD1_3)
!

! 1:[fixed_load] Fixed Load 
      CALL LOAD3P1_EXE(SS(2), (IBRCH(2)+1), (IBRCH(2)+2), (IBRCH(2)+3), &
     &(IBRCH(2)+4), (IBRCH(2)+5), (IBRCH(2)+6))

! 1:[fixed_load] Fixed Load 
      CALL LOAD3P1_EXE(SS(3), (IBRCH(3)+10), (IBRCH(3)+11), (IBRCH(3)+12&
     &), (IBRCH(3)+13), (IBRCH(3)+14), (IBRCH(3)+15))

! 1:[fixed_load] Fixed Load 
      CALL LOAD3P1_EXE(SS(4), (IBRCH(4)+1), (IBRCH(4)+2), (IBRCH(4)+3), &
     &(IBRCH(4)+4), (IBRCH(4)+5), (IBRCH(4)+6))

! 1:[source3] Three Phase Voltage Source Model 1 'Source1'
!  3-Phase source: Source1
      RVD1_1 = RTCF(NRTCF+12)
      RVD1_2 = RTCF(NRTCF+14)
      RVD1_3 = RTCF(NRTCF+13)
      CALL ESYS651_EXE(SS(4), (IBRCH(4)+10), (IBRCH(4)+11), (IBRCH(4)+12&
     &),0,0,0, SS(4), NT_11(1),NT_11(2),NT_11(3), 0, RVD1_2, RVD1_1, 0.0&
     &5, 1.0, 1.0, 1.0,RVD1_3, 1.0, 0.05, 0.2, 0.4, 0.02, 0.5, RVD1_4, R&
     &VD1_5, RVD1_6, RVD1_7)

! 1:[fixed_load] Fixed Load 
      CALL LOAD3P1_EXE(SS(5), (IBRCH(5)+4), (IBRCH(5)+5), (IBRCH(5)+6), &
     &(IBRCH(5)+7), (IBRCH(5)+8), (IBRCH(5)+9))

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOF(ISTOF + 1) = RT_1
      STOF(ISTOF + 2) = RT_2
      STOF(ISTOF + 82) = Vf5_rms
      STOF(ISTOF + 83) = Vf4_rms
      STOI(ISTOI + 1) = BRK
      STOF(ISTOF + 84) = P2_5
      STOF(ISTOF + 85) = Q2_5
      STOF(ISTOF + 86) = P1_3
      STOF(ISTOF + 87) = Q1_3
      STOF(ISTOF + 88) = R1
      STOF(ISTOF + 89) = Vf3_rms
      STOF(ISTOF + 90) = Vf2_rms
      STOF(ISTOF + 91) = Vf1_rms
      STOF(ISTOF + 92) = P1_2
      STOF(ISTOF + 93) = Q1_2
      STOF(ISTOF + 94) = P2_3
      STOF(ISTOF + 95) = Q2_3
      STOF(ISTOF + 96) = P3_4
      STOF(ISTOF + 97) = Q3_4
      STOF(ISTOF + 98) = P2_4
      STOF(ISTOF + 99) = Q2_4
      STOF(ISTOF + 100) = L1
      STOF(ISTOF + 101) = Vph5_rms
      STOF(ISTOF + 102) = Vph4_rms
      STOF(ISTOF + 103) = Vph3_rms
      STOF(ISTOF + 104) = Vph2_rms
      STOF(ISTOF + 105) = Vph1_rms
      STOF(ISTOF + 106) = Q5
      STOF(ISTOF + 107) = P5
      STOF(ISTOF + 108) = Q4
      STOF(ISTOF + 109) = P4
      STOF(ISTOF + 110) = R
      STOF(ISTOF + 111) = L
      STOF(ISTOF + 112) = V5
      STOF(ISTOF + 113) = V4
      STOF(ISTOF + 114) = Q3
      STOF(ISTOF + 115) = P3
      STOF(ISTOF + 116) = Q2
      STOF(ISTOF + 117) = P2
      STOF(ISTOF + 118) = P2_load
      STOF(ISTOF + 119) = Q2_load
      STOF(ISTOF + 140) = RT_5
      STOF(ISTOF + 141) = RT_6
      STOF(ISTOF + 142) = RT_7
      STOF(ISTOF + 171) = RT_12
      STOF(ISTOF + 172) = RT_13
      STOF(ISTOF + 173) = RT_14
      STOF(ISTOF + 202) = RT_19
      STOF(ISTOF + 203) = RT_20
      STOF(ISTOF + 204) = RT_21
      STOF(ISTOF + 233) = RT_26
      STOF(ISTOF + 234) = RT_27
      STOF(ISTOF + 235) = RT_28
      STOF(ISTOF + 264) = RT_33
      STOF(ISTOF + 265) = RT_34
      STOF(ISTOF + 266) = RT_35
      STOF(ISTOF + 281) = RT_38
      STOF(ISTOF + 282) = RT_39
      STOI(ISTOI + 2) = IT_1
      STOF(ISTOF + 283) = RT_40
      STOI(ISTOI + 3) = IT_2
      STOI(ISTOI + 4) = IT_3
      STOF(ISTOF + 284) = RT_41
      STOF(ISTOF + 285) = RT_42
      STOI(ISTOI + 5) = IT_4
      STOF(ISTOF + 286) = RT_43
      STOI(ISTOI + 6) = IT_5
      STOF(ISTOF + 287) = RT_44
      STOI(ISTOI + 7) = IT_6
      STOI(ISTOI + 8) = IT_7
      STOF(ISTOF + 288) = RT_45
      STOF(ISTOF + 289) = RT_46
      STOF(ISTOF + 290) = RT_47
      STOF(ISTOF + 291) = RT_48
      STOF(ISTOF + 292) = RT_49
      STOI(ISTOI + 9) = IT_8
      STOF(ISTOF + 293) = RT_50
      STOI(ISTOI + 10) = IT_9
      STOF(ISTOF + 294) = RT_51
      STOF(ISTOF + 295) = RT_52
      STOI(ISTOI + 11) = IT_10
      STOF(ISTOF + 296) = RT_53
      STOF(ISTOF + 297) = RT_54
      STOF(ISTOF + 298) = P1
      STOF(ISTOF + 299) = Q1
      STOF(ISTOF + 300) = V1
      STOF(ISTOF + 301) = Ph1
      STOF(ISTOF + 302) = V2
      STOF(ISTOF + 303) = Ph2
      STOF(ISTOF + 304) = P4_5
      STOF(ISTOF + 305) = Q4_5
      STOF(ISTOF + 306) = Ph5
      STOF(ISTOF + 307) = Ph4
      STOF(ISTOF + 308) = V3
      STOF(ISTOF + 309) = Ph3

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 2 + IT_0) = Vb1(IT_0)
         STOF(ISTOF + 33 + IT_0) = Vb2(IT_0)
         STOF(ISTOF + 36 + IT_0) = Vb3(IT_0)
         STOF(ISTOF + 119 + IT_0) = Vb5(IT_0)
         STOF(ISTOF + 122 + IT_0) = Vb4(IT_0)
      END DO

! Array (1:7) quantities...
      DO IT_0 = 1,7
         STOF(ISTOF + 5 + IT_0) = Vf1(IT_0)
         STOF(ISTOF + 12 + IT_0) = Vph1(IT_0)
         STOF(ISTOF + 19 + IT_0) = Vph2(IT_0)
         STOF(ISTOF + 26 + IT_0) = Vf2(IT_0)
         STOF(ISTOF + 39 + IT_0) = Vf3(IT_0)
         STOF(ISTOF + 46 + IT_0) = Vph3(IT_0)
         STOF(ISTOF + 53 + IT_0) = Vf14(IT_0)
         STOF(ISTOF + 60 + IT_0) = Vph4(IT_0)
         STOF(ISTOF + 67 + IT_0) = Vf5(IT_0)
         STOF(ISTOF + 74 + IT_0) = Vph5(IT_0)
         STOF(ISTOF + 125 + IT_0) = RT_3(IT_0)
         STOF(ISTOF + 132 + IT_0) = RT_4(IT_0)
         STOF(ISTOF + 142 + IT_0) = RT_8(IT_0)
         STOF(ISTOF + 149 + IT_0) = RT_9(IT_0)
         STOF(ISTOF + 156 + IT_0) = RT_10(IT_0)
         STOF(ISTOF + 163 + IT_0) = RT_11(IT_0)
         STOF(ISTOF + 173 + IT_0) = RT_15(IT_0)
         STOF(ISTOF + 180 + IT_0) = RT_16(IT_0)
         STOF(ISTOF + 187 + IT_0) = RT_17(IT_0)
         STOF(ISTOF + 194 + IT_0) = RT_18(IT_0)
         STOF(ISTOF + 204 + IT_0) = RT_22(IT_0)
         STOF(ISTOF + 211 + IT_0) = RT_23(IT_0)
         STOF(ISTOF + 218 + IT_0) = RT_24(IT_0)
         STOF(ISTOF + 225 + IT_0) = RT_25(IT_0)
         STOF(ISTOF + 235 + IT_0) = RT_29(IT_0)
         STOF(ISTOF + 242 + IT_0) = RT_30(IT_0)
         STOF(ISTOF + 249 + IT_0) = RT_31(IT_0)
         STOF(ISTOF + 256 + IT_0) = RT_32(IT_0)
         STOF(ISTOF + 266 + IT_0) = RT_36(IT_0)
         STOF(ISTOF + 273 + IT_0) = RT_37(IT_0)
      END DO

!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

      REAL    P3PH3         ! 
      REAL    Q3PH3         ! 
      REAL    VM3PH2        ! '3 Phase RMS Voltage Measurement'
      REAL    EMTDC_VVDC    ! 
!     SUBR    MPHASE3PS     ! Phase Measurement in a 3p signal
!     SUBR    FTN180        ! FFT Calculation
      REAL    VBRANCH       ! 

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Electrical Node Indices
      INTEGER  NT_8(3), NT_11(3), Bus1(3)
      INTEGER  Bus5(3), Bus4(3), Bus3(3), Bus2(3)

! Control Signals
      REAL     Vb1(3), Vf1(7), Vph1(7), Vph2(7)
      REAL     Vf2(7), Vb2(3), Vb3(3), Vf3(7)
      REAL     Vph3(7), Vf14(7), Vph4(7), Vf5(7)
      REAL     Vph5(7), Vf5_rms, Vf4_rms, P2_5
      REAL     Q2_5, P1_3, Q1_3, Vf3_rms, Vf2_rms
      REAL     Vf1_rms, P1_2, Q1_2, P2_3, Q2_3
      REAL     P3_4, Q3_4, P2_4, Q2_4, Vph5_rms
      REAL     Vph4_rms, Vph3_rms, Vph2_rms
      REAL     Vph1_rms, Q5, P5, Q4, P4, V5, V4
      REAL     Q3, P3, Q2, P2, P2_load, Q2_load
      REAL     Vb5(3), Vb4(3), RT_3(7), RT_4(7)
      REAL     RT_5, RT_6, RT_7, RT_8(7), RT_9(7)
      REAL     RT_10(7), RT_11(7), RT_12, RT_13
      REAL     RT_14, RT_15(7), RT_16(7)
      REAL     RT_17(7), RT_18(7), RT_19, RT_20
      REAL     RT_21, RT_22(7), RT_23(7)
      REAL     RT_24(7), RT_25(7), RT_26, RT_27
      REAL     RT_28, RT_29(7), RT_30(7)
      REAL     RT_31(7), RT_32(7), RT_33, RT_34
      REAL     RT_35, RT_36(7), RT_37(7), RT_51
      REAL     RT_52, RT_53, RT_54, P1, Q1, V1
      REAL     Ph1, V2, Ph2, P4_5, Q4_5, Ph5, Ph4
      REAL     V3, Ph3

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS, SS(6), IBRCH(6), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      IPGB      = NPGB
      NPGB      = NPGB + 34
      INODE     = NNODE + 2
      NNODE     = NNODE + 62

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 6

      DO IT_0 = 1,6
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 12

      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 15

      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 15

      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 21

      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 9

      IBRCH(6)     = NBRCH(SS(6))
      NBRCH(SS(6)) = NBRCH(SS(6)) + 6
!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      Vf5_rms  = STOF(ISTOF + 82)
      Vf4_rms  = STOF(ISTOF + 83)
      P2_5     = STOF(ISTOF + 84)
      Q2_5     = STOF(ISTOF + 85)
      P1_3     = STOF(ISTOF + 86)
      Q1_3     = STOF(ISTOF + 87)
      Vf3_rms  = STOF(ISTOF + 89)
      Vf2_rms  = STOF(ISTOF + 90)
      Vf1_rms  = STOF(ISTOF + 91)
      P1_2     = STOF(ISTOF + 92)
      Q1_2     = STOF(ISTOF + 93)
      P2_3     = STOF(ISTOF + 94)
      Q2_3     = STOF(ISTOF + 95)
      P3_4     = STOF(ISTOF + 96)
      Q3_4     = STOF(ISTOF + 97)
      P2_4     = STOF(ISTOF + 98)
      Q2_4     = STOF(ISTOF + 99)
      Vph5_rms = STOF(ISTOF + 101)
      Vph4_rms = STOF(ISTOF + 102)
      Vph3_rms = STOF(ISTOF + 103)
      Vph2_rms = STOF(ISTOF + 104)
      Vph1_rms = STOF(ISTOF + 105)
      Q5       = STOF(ISTOF + 106)
      P5       = STOF(ISTOF + 107)
      Q4       = STOF(ISTOF + 108)
      P4       = STOF(ISTOF + 109)
      V5       = STOF(ISTOF + 112)
      V4       = STOF(ISTOF + 113)
      Q3       = STOF(ISTOF + 114)
      P3       = STOF(ISTOF + 115)
      Q2       = STOF(ISTOF + 116)
      P2       = STOF(ISTOF + 117)
      P2_load  = STOF(ISTOF + 118)
      Q2_load  = STOF(ISTOF + 119)
      RT_5     = STOF(ISTOF + 140)
      RT_6     = STOF(ISTOF + 141)
      RT_7     = STOF(ISTOF + 142)
      RT_12    = STOF(ISTOF + 171)
      RT_13    = STOF(ISTOF + 172)
      RT_14    = STOF(ISTOF + 173)
      RT_19    = STOF(ISTOF + 202)
      RT_20    = STOF(ISTOF + 203)
      RT_21    = STOF(ISTOF + 204)
      RT_26    = STOF(ISTOF + 233)
      RT_27    = STOF(ISTOF + 234)
      RT_28    = STOF(ISTOF + 235)
      RT_33    = STOF(ISTOF + 264)
      RT_34    = STOF(ISTOF + 265)
      RT_35    = STOF(ISTOF + 266)
      RT_51    = STOF(ISTOF + 294)
      RT_52    = STOF(ISTOF + 295)
      RT_53    = STOF(ISTOF + 296)
      RT_54    = STOF(ISTOF + 297)
      P1       = STOF(ISTOF + 298)
      Q1       = STOF(ISTOF + 299)
      V1       = STOF(ISTOF + 300)
      Ph1      = STOF(ISTOF + 301)
      V2       = STOF(ISTOF + 302)
      Ph2      = STOF(ISTOF + 303)
      P4_5     = STOF(ISTOF + 304)
      Q4_5     = STOF(ISTOF + 305)
      Ph5      = STOF(ISTOF + 306)
      Ph4      = STOF(ISTOF + 307)
      V3       = STOF(ISTOF + 308)
      Ph3      = STOF(ISTOF + 309)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         Vb1(IT_0) = STOF(ISTOF + 2 + IT_0)
         Vb2(IT_0) = STOF(ISTOF + 33 + IT_0)
         Vb3(IT_0) = STOF(ISTOF + 36 + IT_0)
         Vb5(IT_0) = STOF(ISTOF + 119 + IT_0)
         Vb4(IT_0) = STOF(ISTOF + 122 + IT_0)
      END DO

! Array (1:7) quantities...
      DO IT_0 = 1,7
         Vf1(IT_0) = STOF(ISTOF + 5 + IT_0)
         Vph1(IT_0) = STOF(ISTOF + 12 + IT_0)
         Vph2(IT_0) = STOF(ISTOF + 19 + IT_0)
         Vf2(IT_0) = STOF(ISTOF + 26 + IT_0)
         Vf3(IT_0) = STOF(ISTOF + 39 + IT_0)
         Vph3(IT_0) = STOF(ISTOF + 46 + IT_0)
         Vf14(IT_0) = STOF(ISTOF + 53 + IT_0)
         Vph4(IT_0) = STOF(ISTOF + 60 + IT_0)
         Vf5(IT_0) = STOF(ISTOF + 67 + IT_0)
         Vph5(IT_0) = STOF(ISTOF + 74 + IT_0)
         RT_3(IT_0) = STOF(ISTOF + 125 + IT_0)
         RT_4(IT_0) = STOF(ISTOF + 132 + IT_0)
         RT_8(IT_0) = STOF(ISTOF + 142 + IT_0)
         RT_9(IT_0) = STOF(ISTOF + 149 + IT_0)
         RT_10(IT_0) = STOF(ISTOF + 156 + IT_0)
         RT_11(IT_0) = STOF(ISTOF + 163 + IT_0)
         RT_15(IT_0) = STOF(ISTOF + 173 + IT_0)
         RT_16(IT_0) = STOF(ISTOF + 180 + IT_0)
         RT_17(IT_0) = STOF(ISTOF + 187 + IT_0)
         RT_18(IT_0) = STOF(ISTOF + 194 + IT_0)
         RT_22(IT_0) = STOF(ISTOF + 204 + IT_0)
         RT_23(IT_0) = STOF(ISTOF + 211 + IT_0)
         RT_24(IT_0) = STOF(ISTOF + 218 + IT_0)
         RT_25(IT_0) = STOF(ISTOF + 225 + IT_0)
         RT_29(IT_0) = STOF(ISTOF + 235 + IT_0)
         RT_30(IT_0) = STOF(ISTOF + 242 + IT_0)
         RT_31(IT_0) = STOF(ISTOF + 249 + IT_0)
         RT_32(IT_0) = STOF(ISTOF + 256 + IT_0)
         RT_36(IT_0) = STOF(ISTOF + 266 + IT_0)
         RT_37(IT_0) = STOF(ISTOF + 273 + IT_0)
      END DO

!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_8(IT_0) = NODE(INODE + 21 + IT_0)
         NT_11(IT_0) = NODE(INODE + 30 + IT_0)
         Bus1(IT_0) = NODE(INODE + 33 + IT_0)
         Bus5(IT_0) = NODE(INODE + 36 + IT_0)
         Bus4(IT_0) = NODE(INODE + 42 + IT_0)
         Bus3(IT_0) = NODE(INODE + 48 + IT_0)
         Bus2(IT_0) = NODE(INODE + 54 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+7), (IBRCH(1)+8), (&
     &IBRCH(1)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(1378704669,RVD1_1,"Pd")
      P1 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+7), (IBRCH(1)+8), (&
     &IBRCH(1)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(1378704669,RVD1_1,"Qd")
      Q1 = RVD1_1
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(1), NT_8(1), NT_8(2), NT_8(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGRG(1378704669,RVD1_1,"Vd")
      V1 = RVD1_1
      RVD1_2 = EMTDC_VVDC(SS(1), NT_8(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(1), NT_8(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(1), NT_8(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      Ph1 = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI(1378704669,1,"hide1")
        CALL PSCAD_AGI(1378704669,1,"hide2")
      ENDIF

! 20:[voltmetergnd] Voltmeter (Line - Ground) 'Vb1'
      Vb1(1) = EMTDC_VVDC(SS(1), Bus1(1), 0)
      Vb1(2) = EMTDC_VVDC(SS(1), Bus1(2), 0)
      Vb1(3) = EMTDC_VVDC(SS(1), Bus1(3), 0)

! 40:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(2), (IBRCH(2)+13), (IBRCH(2)+14),&
     & (IBRCH(2)+15),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(587221812,RVD1_1,"Pd")
      P3 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(2), (IBRCH(2)+13), (IBRCH(2)+14),&
     & (IBRCH(2)+15),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(587221812,RVD1_1,"Qd")
      Q3 = RVD1_1
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(2), Bus3(1), Bus3(2), Bus3(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGRG(587221812,RVD1_1,"Vd")
      V3 = RVD1_1
      RVD1_2 = EMTDC_VVDC(SS(2), Bus3(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(2), Bus3(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(2), Bus3(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      Ph3 = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI(587221812,1,"hide1")
        CALL PSCAD_AGI(587221812,1,"hide2")
      ENDIF

! 60:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(3), (IBRCH(3)+7), (IBRCH(3)+8), (&
     &IBRCH(3)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(384787598,RVD1_1,"Pd")
      P4 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(3), (IBRCH(3)+7), (IBRCH(3)+8), (&
     &IBRCH(3)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(384787598,RVD1_1,"Qd")
      Q4 = RVD1_1
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(3), Bus4(1), Bus4(2), Bus4(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGRG(384787598,RVD1_1,"Vd")
      V4 = RVD1_1
      RVD1_2 = EMTDC_VVDC(SS(3), Bus4(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(3), Bus4(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(3), Bus4(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      Ph4 = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI(384787598,1,"hide1")
        CALL PSCAD_AGI(384787598,1,"hide2")
      ENDIF

! 70:[voltmetergnd] Voltmeter (Line - Ground) 'vb3'
      vb3(1) = EMTDC_VVDC(SS(2), Bus3(1), 0)
      vb3(2) = EMTDC_VVDC(SS(2), Bus3(2), 0)
      vb3(3) = EMTDC_VVDC(SS(2), Bus3(3), 0)

! 80:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+4), (IBRCH(1)+5), (&
     &IBRCH(1)+6),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(1693078603,RVD1_1,"Pd")
      P1_3 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+4), (IBRCH(1)+5), (&
     &IBRCH(1)+6),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(1693078603,RVD1_1,"Qd")
      Q1_3 = RVD1_1
      RVD1_2 = EMTDC_VVDC(SS(1), Bus1(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(1), Bus1(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(1), Bus1(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI(1693078603,1,"hide1")
        CALL PSCAD_AGI(1693078603,1,"hide2")
      ENDIF

! 100:[voltmetergnd] Voltmeter (Line - Ground) 'Vb4'
      Vb4(1) = EMTDC_VVDC(SS(3), Bus4(1), 0)
      Vb4(2) = EMTDC_VVDC(SS(3), Bus4(2), 0)
      Vb4(3) = EMTDC_VVDC(SS(3), Bus4(3), 0)

! 120:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(2), (IBRCH(2)+10), (IBRCH(2)+11),&
     & (IBRCH(2)+12),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(989472091,RVD1_1,"Pd")
      P3_4 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(2), (IBRCH(2)+10), (IBRCH(2)+11),&
     & (IBRCH(2)+12),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(989472091,RVD1_1,"Qd")
      Q3_4 = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI(989472091,1,"hide1")
        CALL PSCAD_AGI(989472091,1,"hide2")
      ENDIF

! 150:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(2), (IBRCH(2)+7), (IBRCH(2)+8), (&
     &IBRCH(2)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(749785535,RVD1_1,"Pd")
      P2_3 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(2), (IBRCH(2)+7), (IBRCH(2)+8), (&
     &IBRCH(2)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(749785535,RVD1_1,"Qd")
      Q2_3 = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI(749785535,1,"hide1")
        CALL PSCAD_AGI(749785535,1,"hide2")
      ENDIF

! 180:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(3), (IBRCH(3)+4), (IBRCH(3)+5), (&
     &IBRCH(3)+6),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(1382418949,RVD1_1,"Pd")
      P4_5 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(3), (IBRCH(3)+4), (IBRCH(3)+5), (&
     &IBRCH(3)+6),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(1382418949,RVD1_1,"Qd")
      Q4_5 = RVD1_1
      RVD1_2 = EMTDC_VVDC(SS(3), Bus4(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(3), Bus4(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(3), Bus4(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI(1382418949,1,"hide1")
        CALL PSCAD_AGI(1382418949,1,"hide2")
      ENDIF

! 200:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(3), (IBRCH(3)+1), (IBRCH(3)+2), (&
     &IBRCH(3)+3),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(2135884311,RVD1_1,"Pd")
      P2_4 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(3), (IBRCH(3)+1), (IBRCH(3)+2), (&
     &IBRCH(3)+3),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(2135884311,RVD1_1,"Qd")
      Q2_4 = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI(2135884311,1,"hide1")
        CALL PSCAD_AGI(2135884311,1,"hide2")
      ENDIF

! 210:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+10), (IBRCH(1)+11),&
     & (IBRCH(1)+12),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(2005992875,RVD1_1,"Pd")
      P1_2 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+10), (IBRCH(1)+11),&
     & (IBRCH(1)+12),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(2005992875,RVD1_1,"Qd")
      Q1_2 = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI(2005992875,1,"hide1")
        CALL PSCAD_AGI(2005992875,1,"hide2")
      ENDIF

! 300:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(4), (IBRCH(4)+13), (IBRCH(4)+14),&
     & (IBRCH(4)+15),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(1554035066,RVD1_1,"Pd")
      P2_5 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(4), (IBRCH(4)+13), (IBRCH(4)+14),&
     & (IBRCH(4)+15),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(1554035066,RVD1_1,"Qd")
      Q2_5 = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI(1554035066,1,"hide1")
        CALL PSCAD_AGI(1554035066,1,"hide2")
      ENDIF

! 310:[voltmetergnd] Voltmeter (Line - Ground) 'Vb2'
      Vb2(1) = EMTDC_VVDC(SS(4), Bus2(1), 0)
      Vb2(2) = EMTDC_VVDC(SS(4), Bus2(2), 0)
      Vb2(3) = EMTDC_VVDC(SS(4), Bus2(3), 0)

! 320:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(4), (IBRCH(4)+7), (IBRCH(4)+8), (&
     &IBRCH(4)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(1160773924,RVD1_1,"Pd")
      P2 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(4), (IBRCH(4)+7), (IBRCH(4)+8), (&
     &IBRCH(4)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(1160773924,RVD1_1,"Qd")
      Q2 = RVD1_1
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(4), NT_11(1), NT_11(2), NT_11(&
     &3), RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGRG(1160773924,RVD1_1,"Vd")
      V2 = RVD1_1
      RVD1_2 = EMTDC_VVDC(SS(4), NT_11(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(4), NT_11(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(4), NT_11(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      Ph2 = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI(1160773924,1,"hide1")
        CALL PSCAD_AGI(1160773924,1,"hide2")
      ENDIF

! 330:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(4), (IBRCH(4)+16), (IBRCH(4)+17),&
     & (IBRCH(4)+18),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(1788110536,RVD1_1,"Pd")
      P2_load = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(4), (IBRCH(4)+16), (IBRCH(4)+17),&
     & (IBRCH(4)+18),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(1788110536,RVD1_1,"Qd")
      Q2_load = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI(1788110536,1,"hide1")
        CALL PSCAD_AGI(1788110536,1,"hide2")
      ENDIF

! 350:[fft] On-Line Frequency Scanner 
      IVD1_1=0
      CALL FTN180(0,0,7,1,60.0,60.0,Vb1(1),IVD1_1,Vf1,Vph1,RT_5)
      CALL FTN180(0,0,7,1,60.0,60.0,Vb1(2),IVD1_1,RT_8,RT_3,RT_7)
      CALL FTN180(0,0,7,1,60.0,60.0,Vb1(3),IVD1_1,RT_9,RT_4,RT_6)
!

! 360:[fft] On-Line Frequency Scanner 
      IVD1_1=0
      CALL FTN180(0,0,7,1,60.0,60.0,Vb2(1),IVD1_1,Vf2,Vph2,RT_12)
      CALL FTN180(0,0,7,1,60.0,60.0,Vb2(2),IVD1_1,RT_15,RT_10,RT_14)
      CALL FTN180(0,0,7,1,60.0,60.0,Vb2(3),IVD1_1,RT_16,RT_11,RT_13)
!

! 380:[voltmetergnd] Voltmeter (Line - Ground) 'Vb5'
      Vb5(1) = EMTDC_VVDC(SS(5), Bus5(1), 0)
      Vb5(2) = EMTDC_VVDC(SS(5), Bus5(2), 0)
      Vb5(3) = EMTDC_VVDC(SS(5), Bus5(3), 0)

! 390:[fft] On-Line Frequency Scanner 
      IVD1_1=0
      CALL FTN180(0,0,7,1,60.0,60.0,Vb3(1),IVD1_1,Vf3,Vph3,RT_19)
      CALL FTN180(0,0,7,1,60.0,60.0,Vb3(2),IVD1_1,RT_22,RT_17,RT_21)
      CALL FTN180(0,0,7,1,60.0,60.0,Vb3(3),IVD1_1,RT_23,RT_18,RT_20)
!

! 400:[fft] On-Line Frequency Scanner 
      IVD1_1=0
      CALL FTN180(0,0,7,1,60.0,60.0,Vb4(1),IVD1_1,Vf14,Vph4,RT_26)
      CALL FTN180(0,0,7,1,60.0,60.0,Vb4(2),IVD1_1,RT_29,RT_24,RT_28)
      CALL FTN180(0,0,7,1,60.0,60.0,Vb4(3),IVD1_1,RT_30,RT_25,RT_27)
!

! 410:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(5), (IBRCH(5)+1), (IBRCH(5)+2), (&
     &IBRCH(5)+3),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(972352034,RVD1_1,"Pd")
      P5 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(5), (IBRCH(5)+1), (IBRCH(5)+2), (&
     &IBRCH(5)+3),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGRG(972352034,RVD1_1,"Qd")
      Q5 = RVD1_1
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(5), Bus5(1), Bus5(2), Bus5(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGRG(972352034,RVD1_1,"Vd")
      V5 = RVD1_1
      RVD1_2 = EMTDC_VVDC(SS(5), Bus5(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(5), Bus5(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(5), Bus5(3), 0)
      CALL MPHASE3PS(0, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      Ph5 = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI(972352034,1,"hide1")
        CALL PSCAD_AGI(972352034,1,"hide2")
      ENDIF

! 420:[fft] On-Line Frequency Scanner 
      IVD1_1=0
      CALL FTN180(0,0,7,1,60.0,60.0,Vb5(1),IVD1_1,Vf5,Vph5,RT_33)
      CALL FTN180(0,0,7,1,60.0,60.0,Vb5(2),IVD1_1,RT_36,RT_31,RT_35)
      CALL FTN180(0,0,7,1,60.0,60.0,Vb5(3),IVD1_1,RT_37,RT_32,RT_34)
!

! 430:[pgb] Output Channel 'P2_5'

      PGB(IPGB+1) = P2_5

! 440:[pgb] Output Channel 'P1_2'

      PGB(IPGB+2) = P1_2

! 450:[pgb] Output Channel 'P3_4'

      PGB(IPGB+3) = P3_4

! 460:[pgb] Output Channel 'Q2_5'

      PGB(IPGB+4) = Q2_5

! 470:[pgb] Output Channel 'Q1_2'

      PGB(IPGB+5) = Q1_2

! 480:[pgb] Output Channel 'Q3_4'

      PGB(IPGB+6) = Q3_4

! 490:[pgb] Output Channel 'P1_3'

      PGB(IPGB+7) = P1_3

! 500:[pgb] Output Channel 'P2_3'

      PGB(IPGB+8) = P2_3

! 510:[pgb] Output Channel 'P2_4'

      PGB(IPGB+9) = P2_4

! 520:[pgb] Output Channel 'Q1_3'

      PGB(IPGB+10) = Q1_3

! 530:[pgb] Output Channel 'Q2_3'

      PGB(IPGB+11) = Q2_3

! 540:[pgb] Output Channel 'Q2_4'

      PGB(IPGB+12) = Q2_4

! 550:[pgb] Output Channel 'V5'

      PGB(IPGB+13) = V5

! 560:[pgb] Output Channel 'V4'

      PGB(IPGB+14) = V4

! 570:[sumjct] Summing/Differencing Junctions 
      RT_51 = + P2 - P2_load

! 580:[pgb] Output Channel 'P2_inj'

      PGB(IPGB+15) = RT_51

! 590:[pgb] Output Channel 'P4'

      PGB(IPGB+16) = P4

! 600:[pgb] Output Channel 'P3'

      PGB(IPGB+17) = P3

! 610:[pgb] Output Channel 'Q4'

      PGB(IPGB+18) = Q4

! 620:[pgb] Output Channel 'Q3'

      PGB(IPGB+19) = Q3

! 630:[sumjct] Summing/Differencing Junctions 
      RT_52 = + Q2 - Q2_load

! 640:[pgb] Output Channel 'Q2_inj'

      PGB(IPGB+20) = RT_52

! 650:[pgb] Output Channel 'P5'

      PGB(IPGB+21) = P5

! 660:[pgb] Output Channel 'Q5'

      PGB(IPGB+22) = Q5

! 670:[datatap] Scalar/Array Tap 
       RT_53 = Vb5(1)

! 680:[datatap] Scalar/Array Tap 
       RT_54 = Vb4(1)

! 690:[pgb] Output Channel 'Vb4'

      PGB(IPGB+23) = RT_54

! 730:[datatap] Scalar/Array Tap 
       Vf1_rms = Vf1(1)

! 740:[datatap] Scalar/Array Tap 
       Vf2_rms = Vf2(1)

! 750:[datatap] Scalar/Array Tap 
       Vf3_rms = Vf3(1)

! 760:[datatap] Scalar/Array Tap 
       Vf4_rms = Vf14(1)

! 770:[datatap] Scalar/Array Tap 
       Vf5_rms = Vf5(1)

! 780:[datatap] Scalar/Array Tap 
       Vph1_rms = Vph1(1)

! 790:[datatap] Scalar/Array Tap 
       Vph2_rms = Vph2(1)

! 800:[datatap] Scalar/Array Tap 
       Vph3_rms = Vph3(1)

! 810:[datatap] Scalar/Array Tap 
       Vph4_rms = Vph4(1)

! 820:[datatap] Scalar/Array Tap 
       Vph5_rms = Vph5(1)

! 840:[pgb] Output Channel 'Vb5'

      PGB(IPGB+24) = RT_53

! 850:[pgb] Output Channel 'Vph5_rms'

      PGB(IPGB+25) = Vph5_rms

! 860:[pgb] Output Channel 'Vf5_rms'

      PGB(IPGB+26) = Vf5_rms

! 870:[pgb] Output Channel 'Vph4_rms'

      PGB(IPGB+27) = Vph4_rms

! 880:[pgb] Output Channel 'Vf4_rms'

      PGB(IPGB+28) = Vf4_rms

! 890:[pgb] Output Channel 'Vph3_rms'

      PGB(IPGB+29) = Vph3_rms

! 900:[pgb] Output Channel 'Vf3_rms'

      PGB(IPGB+30) = Vf3_rms

! 910:[pgb] Output Channel 'Vph2_rms'

      PGB(IPGB+31) = Vph2_rms

! 920:[pgb] Output Channel 'Vf2_rms'

      PGB(IPGB+32) = Vf2_rms

! 930:[pgb] Output Channel 'Vph1_rms'

      PGB(IPGB+33) = Vph1_rms

! 940:[pgb] Output Channel 'Vf1_rms'

      PGB(IPGB+34) = Vf1_rms

! 950:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!
!

! 960:[breaker3] 3 Phase Breaker 'BRK'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(4), (IBRCH(4)+19), (IBRCH(4)+20), (IBRCH(4)+21),&
     &0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOF(ISTOF + 82) = Vf5_rms
      STOF(ISTOF + 83) = Vf4_rms
      STOF(ISTOF + 84) = P2_5
      STOF(ISTOF + 85) = Q2_5
      STOF(ISTOF + 86) = P1_3
      STOF(ISTOF + 87) = Q1_3
      STOF(ISTOF + 89) = Vf3_rms
      STOF(ISTOF + 90) = Vf2_rms
      STOF(ISTOF + 91) = Vf1_rms
      STOF(ISTOF + 92) = P1_2
      STOF(ISTOF + 93) = Q1_2
      STOF(ISTOF + 94) = P2_3
      STOF(ISTOF + 95) = Q2_3
      STOF(ISTOF + 96) = P3_4
      STOF(ISTOF + 97) = Q3_4
      STOF(ISTOF + 98) = P2_4
      STOF(ISTOF + 99) = Q2_4
      STOF(ISTOF + 101) = Vph5_rms
      STOF(ISTOF + 102) = Vph4_rms
      STOF(ISTOF + 103) = Vph3_rms
      STOF(ISTOF + 104) = Vph2_rms
      STOF(ISTOF + 105) = Vph1_rms
      STOF(ISTOF + 106) = Q5
      STOF(ISTOF + 107) = P5
      STOF(ISTOF + 108) = Q4
      STOF(ISTOF + 109) = P4
      STOF(ISTOF + 112) = V5
      STOF(ISTOF + 113) = V4
      STOF(ISTOF + 114) = Q3
      STOF(ISTOF + 115) = P3
      STOF(ISTOF + 116) = Q2
      STOF(ISTOF + 117) = P2
      STOF(ISTOF + 118) = P2_load
      STOF(ISTOF + 119) = Q2_load
      STOF(ISTOF + 140) = RT_5
      STOF(ISTOF + 141) = RT_6
      STOF(ISTOF + 142) = RT_7
      STOF(ISTOF + 171) = RT_12
      STOF(ISTOF + 172) = RT_13
      STOF(ISTOF + 173) = RT_14
      STOF(ISTOF + 202) = RT_19
      STOF(ISTOF + 203) = RT_20
      STOF(ISTOF + 204) = RT_21
      STOF(ISTOF + 233) = RT_26
      STOF(ISTOF + 234) = RT_27
      STOF(ISTOF + 235) = RT_28
      STOF(ISTOF + 264) = RT_33
      STOF(ISTOF + 265) = RT_34
      STOF(ISTOF + 266) = RT_35
      STOF(ISTOF + 294) = RT_51
      STOF(ISTOF + 295) = RT_52
      STOF(ISTOF + 296) = RT_53
      STOF(ISTOF + 297) = RT_54
      STOF(ISTOF + 298) = P1
      STOF(ISTOF + 299) = Q1
      STOF(ISTOF + 300) = V1
      STOF(ISTOF + 301) = Ph1
      STOF(ISTOF + 302) = V2
      STOF(ISTOF + 303) = Ph2
      STOF(ISTOF + 304) = P4_5
      STOF(ISTOF + 305) = Q4_5
      STOF(ISTOF + 306) = Ph5
      STOF(ISTOF + 307) = Ph4
      STOF(ISTOF + 308) = V3
      STOF(ISTOF + 309) = Ph3

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 2 + IT_0) = Vb1(IT_0)
         STOF(ISTOF + 33 + IT_0) = Vb2(IT_0)
         STOF(ISTOF + 36 + IT_0) = Vb3(IT_0)
         STOF(ISTOF + 119 + IT_0) = Vb5(IT_0)
         STOF(ISTOF + 122 + IT_0) = Vb4(IT_0)
      END DO

! Array (1:7) quantities...
      DO IT_0 = 1,7
         STOF(ISTOF + 5 + IT_0) = Vf1(IT_0)
         STOF(ISTOF + 12 + IT_0) = Vph1(IT_0)
         STOF(ISTOF + 19 + IT_0) = Vph2(IT_0)
         STOF(ISTOF + 26 + IT_0) = Vf2(IT_0)
         STOF(ISTOF + 39 + IT_0) = Vf3(IT_0)
         STOF(ISTOF + 46 + IT_0) = Vph3(IT_0)
         STOF(ISTOF + 53 + IT_0) = Vf14(IT_0)
         STOF(ISTOF + 60 + IT_0) = Vph4(IT_0)
         STOF(ISTOF + 67 + IT_0) = Vf5(IT_0)
         STOF(ISTOF + 74 + IT_0) = Vph5(IT_0)
         STOF(ISTOF + 125 + IT_0) = RT_3(IT_0)
         STOF(ISTOF + 132 + IT_0) = RT_4(IT_0)
         STOF(ISTOF + 142 + IT_0) = RT_8(IT_0)
         STOF(ISTOF + 149 + IT_0) = RT_9(IT_0)
         STOF(ISTOF + 156 + IT_0) = RT_10(IT_0)
         STOF(ISTOF + 163 + IT_0) = RT_11(IT_0)
         STOF(ISTOF + 173 + IT_0) = RT_15(IT_0)
         STOF(ISTOF + 180 + IT_0) = RT_16(IT_0)
         STOF(ISTOF + 187 + IT_0) = RT_17(IT_0)
         STOF(ISTOF + 194 + IT_0) = RT_18(IT_0)
         STOF(ISTOF + 204 + IT_0) = RT_22(IT_0)
         STOF(ISTOF + 211 + IT_0) = RT_23(IT_0)
         STOF(ISTOF + 218 + IT_0) = RT_24(IT_0)
         STOF(ISTOF + 225 + IT_0) = RT_25(IT_0)
         STOF(ISTOF + 235 + IT_0) = RT_29(IT_0)
         STOF(ISTOF + 242 + IT_0) = RT_30(IT_0)
         STOF(ISTOF + 249 + IT_0) = RT_31(IT_0)
         STOF(ISTOF + 256 + IT_0) = RT_32(IT_0)
         STOF(ISTOF + 266 + IT_0) = RT_36(IT_0)
         STOF(ISTOF + 273 + IT_0) = RT_37(IT_0)
      END DO

!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainDyn_Begin()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------


!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  NT_11(3)

! Control Signals
      INTEGER  IT_1, IT_2, IT_3, IT_4, IT_5, IT_6
      INTEGER  IT_7, IT_8, IT_9
      REAL     RT_45, RT_48

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(6), IBRCH(6), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 62

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 6

      DO IT_0 = 1,6
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 12

      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 15

      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 15

      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 21

      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 9

      IBRCH(6)     = NBRCH(SS(6))
      NBRCH(SS(6)) = NBRCH(SS(6)) + 6
!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_11(IT_0) = NODE(INODE + 30 + IT_0)
      END DO

!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 30:[consti] Integer Constant 

! 50:[square] Square 

! 90:[consti] Integer Constant 

! 110:[square] Square 

! 130:[time-sig] Output of Simulation Time 

! 140:[const] Real Constant 

! 160:[const] Real Constant 

! 170:[time-sig] Output of Simulation Time 

! 190:[consti] Integer Constant 

! 220:[consti] Integer Constant 

! 230:[consti] Integer Constant 

! 240:[consti] Integer Constant 

! 250:[consti] Integer Constant 

! 260:[consti] Integer Constant 

! 270:[consti] Integer Constant 

! 280:[time-sig] Output of Simulation Time 

! 290:[time-sig] Output of Simulation Time 

! 700:[mult] Multiplier 

! 710:[mult] Multiplier 

! 720:[sumjct] Summing/Differencing Junctions 

! 830:[div] Divider 

! 950:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 960:[breaker3] 3 Phase Breaker 'BRK'
      CALL COMPONENT_ID(ICALL_NO,1137688432)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 970:[div] Divider 

! 980:[div] Divider 

! 990:[mult] Multiplier 

! 1000:[mult] Multiplier 

! 1010:[sumjct] Summing/Differencing Junctions 

! 1020:[div] Divider 

! 1030:[div] Divider 

! 1:[source_3] Three Phase Voltage Source Model 2 'Source 1'
      CALL E_3PVSRC_CFG(6,1.0,60.0,0.0,0.0,0.0,0.0,0.0,0.0,230.0,100.0,0&
     &.05)

! 1:[fixed_load] Fixed Load 
      CALL LOAD1P1_CFG(132.790562,60.0,45.0,15.0,2.0,2.0,0.0,0.0)

! 1:[fixed_load] Fixed Load 
      CALL LOAD1P1_CFG(132.790562,60.0,45.0,5.0,2.0,2.0,0.0,0.0)

! 1:[fixed_load] Fixed Load 
      CALL LOAD1P1_CFG(132.790562,60.0,20.0,10.0,2.0,2.0,0.0,0.0)

! 1:[source3] Three Phase Voltage Source Model 1 'Source1'
      CALL COMPONENT_ID(ICALL_NO,520514898)
      CALL ESYS651_CFG(3,4,1,0,1,SS(4), (IBRCH(4)+10), (IBRCH(4)+11), (I&
     &BRCH(4)+12),0,0,0, 60.0,60.0,0.0,230.0,0.0,0.0,100.0,230.0,230.0, &
     &1.0,80.0,2.0,1.0,1.0,0.1, 1.0,80.0,1.0,0.1)

! 1:[fixed_load] Fixed Load 
      CALL LOAD1P1_CFG(132.790562,60.0,60.0,10.0,2.0,2.0,0.0,0.0)

      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut_Begin()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------


!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  NT_8(3), NT_11(3), Bus1(3)
      INTEGER  Bus5(3), Bus4(3), Bus3(3), Bus2(3)

! Control Signals

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(6), IBRCH(6), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 62

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 6

      DO IT_0 = 1,6
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 12

      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 15

      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 15

      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 21

      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 9

      IBRCH(6)     = NBRCH(SS(6))
      NBRCH(SS(6)) = NBRCH(SS(6)) + 6
!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_8(IT_0) = NODE(INODE + 21 + IT_0)
         NT_11(IT_0) = NODE(INODE + 30 + IT_0)
         Bus1(IT_0) = NODE(INODE + 33 + IT_0)
         Bus5(IT_0) = NODE(INODE + 36 + IT_0)
         Bus4(IT_0) = NODE(INODE + 42 + IT_0)
         Bus3(IT_0) = NODE(INODE + 48 + IT_0)
         Bus2(IT_0) = NODE(INODE + 54 + IT_0)
      END DO

!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0

! 40:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0

! 60:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0

! 80:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0

! 120:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

! 150:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

! 180:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0

! 200:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

! 210:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

! 300:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

! 320:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0

! 330:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

! 350:[fft] On-Line Frequency Scanner 

! 360:[fft] On-Line Frequency Scanner 

! 390:[fft] On-Line Frequency Scanner 

! 400:[fft] On-Line Frequency Scanner 

! 410:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 4
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0

! 420:[fft] On-Line Frequency Scanner 

! 430:[pgb] Output Channel 'P2_5'

! 440:[pgb] Output Channel 'P1_2'

! 450:[pgb] Output Channel 'P3_4'

! 460:[pgb] Output Channel 'Q2_5'

! 470:[pgb] Output Channel 'Q1_2'

! 480:[pgb] Output Channel 'Q3_4'

! 490:[pgb] Output Channel 'P1_3'

! 500:[pgb] Output Channel 'P2_3'

! 510:[pgb] Output Channel 'P2_4'

! 520:[pgb] Output Channel 'Q1_3'

! 530:[pgb] Output Channel 'Q2_3'

! 540:[pgb] Output Channel 'Q2_4'

! 550:[pgb] Output Channel 'V5'

! 560:[pgb] Output Channel 'V4'

! 570:[sumjct] Summing/Differencing Junctions 

! 580:[pgb] Output Channel 'P2_inj'

! 590:[pgb] Output Channel 'P4'

! 600:[pgb] Output Channel 'P3'

! 610:[pgb] Output Channel 'Q4'

! 620:[pgb] Output Channel 'Q3'

! 630:[sumjct] Summing/Differencing Junctions 

! 640:[pgb] Output Channel 'Q2_inj'

! 650:[pgb] Output Channel 'P5'

! 660:[pgb] Output Channel 'Q5'

! 670:[datatap] Scalar/Array Tap 

! 680:[datatap] Scalar/Array Tap 

! 690:[pgb] Output Channel 'Vb4'

! 730:[datatap] Scalar/Array Tap 

! 740:[datatap] Scalar/Array Tap 

! 750:[datatap] Scalar/Array Tap 

! 760:[datatap] Scalar/Array Tap 

! 770:[datatap] Scalar/Array Tap 

! 780:[datatap] Scalar/Array Tap 

! 790:[datatap] Scalar/Array Tap 

! 800:[datatap] Scalar/Array Tap 

! 810:[datatap] Scalar/Array Tap 

! 820:[datatap] Scalar/Array Tap 

! 840:[pgb] Output Channel 'Vb5'

! 850:[pgb] Output Channel 'Vph5_rms'

! 860:[pgb] Output Channel 'Vf5_rms'

! 870:[pgb] Output Channel 'Vph4_rms'

! 880:[pgb] Output Channel 'Vf4_rms'

! 890:[pgb] Output Channel 'Vph3_rms'

! 900:[pgb] Output Channel 'Vf3_rms'

! 910:[pgb] Output Channel 'Vph2_rms'

! 920:[pgb] Output Channel 'Vf2_rms'

! 930:[pgb] Output Channel 'Vph1_rms'

! 940:[pgb] Output Channel 'Vf1_rms'

      RETURN
      END

